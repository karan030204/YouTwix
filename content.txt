main task #1
Images -> store krna

User Upload Images -> Temporarily store on our server -> then using process we can deploy to cloudinary 3rd party services 
Or 
User Upload Images -> Upload to Cloudinary directly 



devdependencies -> development ke time pe jo dependencies jo hoti h wahan pe use hoga 
main production pe kuch problem nahi ayegi
Production pe nahi leke jayenge isko 
--save-dev or -D ( dev-dependencies install krni h jisko aapko production pe leke nahi jana h)


Automatic server ko reload krne ke liye ek utility h nodemon usse install krdi h woh index.js name ki file ko auto reload kr dega after making changes in the index.js file but hava me to karega nahi woh changes usko batana to padega usko kaise batayenge ham scripts me jaake 
"dev" : "nodemon src/index.js"

dotenv aur modulejs ka ek panga chalta h to woh dekhna hoga
we cannot use import('dotenv')
we need to use required vaala syntax which is commonjs par hamne type module krdi h but chalega


.prettierignore kis kis file me mereko prettier ko apply nahi krna
- environment variables include mat karna

STATUSCODES
- status codes ka already company me hota h predefined memo me likha hota h error iss status code me bhejenge ye sab
- startups me hame khudko banana padega

IMAGES AND VIDEOS
- ye sab 3rd Party API Use karenge ham cloudinary ha kuch bhi aur woh link de dega hame 

(IMP FEATURE)
Watch History - ek bada hi next level complex banata h project ko aur advance level leke jaata h ye feature
mongoose-aggregate-paginate-v2 --- It allows us to write aggregation queries ( true power mongoDb ) - production ( aggregation pipeline ) - For writing complex queries

//Sessions aur cookies dono use krenge ham

//Jane se pehle mujhe milkar jana - MIDDLEWARE

//FILE UPLOAD
utility fn ki bana denge ham ya middleware - reuse kr paaye issiliye ( same for image, same for pdf, same for video)

//HTTP CRASH Course
http : data clear format me hi jaata h (hitesh chaudhary) -> hitesh chaudhary
https : encryption ho jaata h data ko inbetween hide krne ke liye
kahan actually baat krna h -> URL - location, URI - identifier, URN - name

//VVVVVVVVVVVVVIIIIIIIIIMMMMMMMMMMMMPPPPPPPPP
//IMPORT EXPORT KA KHEL
jab export {route.js} --> tab jab import kr rhe ho tab -> import {route} from '../path' karna h 
jab export default route.js --> tab jab import kr rhe ho tab -> import route from '../path' karna h
IMPORT EXPORT ka syntax ache se likhiye
jab import app from "./app.js" h toh you should do export default app NOT export default {app} -> wrong syntax 


///POSTMAN
Jab files wagarh bhejna h postman me to body->form-data bhejna padega to sirf json me hi nahi bhejenge har baar 
// Cloudinary sexy cheez h sab cheez ka public url banake bhej deti h to ham kahin se bhi use kr sakte h usko to bohot beneficial h woh har jagah frontend me bhi aur kahin pe bhi kaam ayega ye cheez
// postman collection -> new collection ( name -> save )
// save as -> users/Register
// No need to write localhost:8000 again and again you can use environment section in the top left sidebar and you can use that it in collection then make changes to No Environment -> youtube -chai or whatever name is there and now you can use {{server}}

Steps for writing backend in express : 

- data modelling or object modelling
- setup code ( till prettier, gitignore) with dependencies and everything

- db setup and connection 
- middlewares and configuration ( cors and cookieParser and BuiltIn Middleware )
- utility for db function - Wrapper Function
- (inside utility only) custom error (class Error) (standardised err response)
- ApiError.js
- ApiResponse.js
- User models and Video Models and JWT ( mongoose-aggregate-paginate-v2) - bcrypt(hash pwd)
- File Upload ( backend hi krta h sab ) ( File handling - poora backend hi sambhalega )
  (fir uske baad aap audio,pdf,word,video,photo, wagarh kuch bhi kr sakte h kuch bhi handle kr sakte h uske baad)
- Cloudinary, express-fileupload, multer
 multer ke through file upload hoga, direct cloudinary nahi hota woh ek aws service jaisa h, sdk hi hai 
 file upload ( multer ) -> (temporary) local server -> cloudinary (local->server) 
- jis bhi route se kuch files aane vaala h to uss route me upload.single('avtar') me mere storage method ko call karunga filename return kr dega locally bhi store ho jayega and filename bhi
- http crash course
// abhi tak sirf setup hua h backend code ka configuration settings hua h 
- Register User 
- How to use postman properly 

